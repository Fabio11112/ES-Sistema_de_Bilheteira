@using SistemaDeBilheteira.Services.Movies

@if (Images.Any())
{
    <div class="carousel-container">
        <button class="carousel-button left" @onclick="PreviousSlide">&#8249;</button>

        <div class="carousel-wrapper">
            <div class="carousel-track" style="transform: translateX(-@($"{CurrentIndex * SlideWidth}%")); transition: transform 0.5s ease;">
                @foreach (var image in Images)
                {
                    <div class="carousel-item">
                        <img src="@image" alt="carousel image" />
                    </div>
                }
            </div>
        </div>

        <button class="carousel-button right" @onclick="NextSlide">&#8250;</button>
    </div>
}
else
{
    <p>Loading images...</p>
}

@code {
    private int CurrentIndex = 0;
    private List<string> Images { get; set; } = new();

    [Parameter]
    public List<int> MovieIds { get; set; }

    private int ImagesPerView = 4; 
    private int SlideWidth => 100 / ImagesPerView;

    protected override async Task OnParametersSetAsync()
    {
        if (MovieIds.Any())
        {
            Images.Clear(); // importante limpiar antes de agregar de nuevo

            var deserializer = new MovieDeserializer();

            foreach (var id in MovieIds)
            {
                var movie = await deserializer.FetchMovie(id);
                if (movie != null && !string.IsNullOrEmpty(movie.PosterPath))
                {
                    Images.Add($"https://image.tmdb.org/t/p/original{movie.PosterPath}");
                }
            }
        }
    }

    private void PreviousSlide()
    {
        CurrentIndex = Math.Max(CurrentIndex - 1, 0); 
        StateHasChanged();
    }

    private void NextSlide()
    {
        CurrentIndex = Math.Min(CurrentIndex + 1, Images.Count - ImagesPerView);
        StateHasChanged();
    } 
}
