
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Response

@if (Movies != null && Movies.Any())
{
    <div class="carousel-container">Recommendations based on the genre of the movie
        <div class="carousel-wrapper">
            <div class="carousel-track">
                @foreach (var movie in GetMoviesByGenre(Genre))
                {
                    <a href="@($"MoviesDescription/{movie.Id}")" class="carousel-item">
                        <img src="@($"https://image.tmdb.org/t/p/w500{movie.PosterPath}")" alt="@movie.Title" />
                    </a>
                }
            </div>
        </div>
    </div>
}
else
{
    <p>Loading images...</p>
}


@code {
    List<Movie>? Movies { get; set; } = new List<Movie>();
    Response<Genre>? Genres { get; set; }
    [Parameter]
    public string Genre { get; set; } = string.Empty;

    
    
    public const int TOTAL_PAGES = 9;
    
    /*     * This method is called when the component is initialized.
     * It fetches the movie data from the API and sets the PosterPath and Type properties.
     */
    protected override async Task OnParametersSetAsync()
    {
        var movieDeserializer = new Deserializer<Response<Movie>>();
        var genreDeserializer = new Deserializer<Response<Genre>>();
        
        string genreUrl = $"{Environment.GetEnvironmentVariable("GENRES_LINK")}";
        
        Genres = await genreDeserializer.Fetch(genreUrl)!;
        
        for (int page = 1; page <= TOTAL_PAGES; page++)
        {
            string apiLinkWithPage = $"https://api.themoviedb.org/3/movie/popular?language=en-US&page={page}";

            var movies = await movieDeserializer.Fetch(apiLinkWithPage)!;
            if(movies != null)
                Movies?.AddRange(movies.Results);
        }
    }

    List<Movie> GetMoviesByGenre(string genre)
    {
        var result = Genres.Genres.FirstOrDefault(x => x.Name == genre);
          
        return Movies?.Where(m => result != null && m.GenreIds.Contains(result.Id)).ToList() ?? new List<Movie>();
    }


    
}
