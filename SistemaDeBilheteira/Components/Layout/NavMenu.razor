@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using SistemaDeBilheteira.Services.Database.Entities.ShoppingCart
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager
@inherits AuthenticatedComponentBase

@inject IServiceManager ServiceManager

@inject NavigationManager NavigationManager

<nav class="navbar">
  <AuthorizeView>
    <Authorized>
      <a class="sessionButton" href="/Logout">LOGOUT</a>
      <a class="logo" href="/">UMAMovies</a>
      <div class="icons">
        <a class="icon-search" href="/search">
          <img src="images/icons/navbar/search.svg" alt="search">

        </a>

        <a href="/Cart" class="icon-cart" style="position: relative;">
          <div @key="@CartElements">
            <span class="cart-count">@CartElements</span>
          </div>
          <img src="images/icons/navbar/cart.svg" alt="cart">
        </a>

        <a class="icon-avatar" href="/Profile">
          <img src="images/icons/profile1.svg" width="43" height="44" styles alt="">
        </a>
      </div>
    </Authorized>

    <NotAuthorized>
      <a class="sessionButton" href="/LogIn">LogIn</a>
      <a class="logo" href="/">UMAMovies</a>
      <div class="icons">
        <input 
          type="text" 
          placeholder="Buscar..." 
          class="search-input" 
          id="searchBox" 
        />
        <a class="icon-search" href="/search">
          <img src="images/icons/navbar/search.svg" alt="search">
        </a>
      </div>
    </NotAuthorized>
  </AuthorizeView>
</nav>

<script>
  function toggleSearch() {
    const input = document.getElementById("searchBox");
    input.classList.toggle("show");
    if (input.classList.contains("show")) {
      input.focus();
    }
  }
</script>

@code {
    private string SearchTerm { get; set; } = "";
    private int CartElements { get; set; }
    private IService<ShoppingCartItem>? Service { get; set; }

    /**
     * initializes the component and retrieves the shopping cart items for the logged-in user.
     */
    protected override async Task OnInitializedAsync()
    {
      await base.OnInitializedAsync();
      Service = ServiceManager.GetService<ShoppingCartItem>();

      if (User == null) return;
      GetCartElements();
    }
    
    /**
     * This method is called when the user clicks the logout button.
     * It navigates to the login page and logs out the user.
     */
    private async Task Logout()
    {
        NavigationManager.NavigateTo("/LogIn", true);
        var result = await AuthService.LogoutAsync();
        if (result.Success)
        {
            NavigationManager.NavigateTo("/LogIn", true);
        }
    }
    /**
     * This method retrieves the shopping cart items for the logged-in user
     * and updates the CartElements property with the total quantity of items.
     */
    private void GetCartElements()
    {
      if (Service != null)
      {
        var items = Service.GetWithQuery(
          q => q.Where(
            i => i.AppUserId == User!.Id));
        foreach (var item in items)
        {
          CartElements += item.Quantity;
        }
      }
    }
}
