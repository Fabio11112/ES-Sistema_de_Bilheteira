@page "/PurchaseHistory"
@inherits AuthenticatedPage 
@using Microsoft.EntityFrameworkCore
@using SistemaDeBilheteira.Components.Cards
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.Database.Entities.PaymentSystem
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem.PhysicalMedia
@using SistemaDeBilheteira.Services.IService.ServiceManager
@inject IServiceManager ServiceManager
@rendermode InteractiveServer

<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Montserrat">
<PageTitle>Purchase History</PageTitle>
<div class="background">
    <div class="logo">
        <img class="purchase-image" src="images/icons/purchase/purchase.svg" alt="cart"/>
        <div class="title">PURCHASE HISTORY</div>
    </div>
    
    <div class="products">
        @foreach (var p in Purchases!)
        {
            foreach (var item in Items.Where(i => i.PurchaseId == p.Id) )
            {
                <PurchaseHistoryItem Item="item" Purchase="p"></PurchaseHistoryItem>
            }
        }
    </div>
</div>
    

@code {

    private IService<Purchase>? PurchaseService { get; set; }
    private IService<PurchaseItem>? ItemService { get; set; }

    private ICollection<Purchase>? Purchases { get; set; }
    private ICollection<PurchaseItem> Items { get; set; }
    
    /**
     * This method is called when the component is initialized.
     * It fetches the movie data from the API and sets the PosterPath and Type properties.
     */
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        PurchaseService = ServiceManager.GetService<Purchase>();
        ItemService = ServiceManager.GetService<PurchaseItem>();

        Purchases = GetUserPurchases();
        Items = GetUserItems();
    }

    /**
     * This method fetches the purchase from the database.
     * It returns a collection of purchases made by the user.
     */
    private ICollection<Purchase> GetUserPurchases()
    {
        return PurchaseService!.GetWithQuery(
            q=> q.Where(
                p=> p.AppUserId == User!.Id)
                .OrderBy(p => p.CreatedAt))!
            .Reverse()
            .ToList();
    }

    /**
     * This method fetches the purchase items from the database.
     * It returns a collection of purchases items made by the user.
     */
    private ICollection<PurchaseItem> GetUserItems()
    {
        var items = new List<PurchaseItem>();
        foreach (var purchase in Purchases!)
        {
            items.AddRange(GetItems(purchase).ToList());
        }

        return items;
    }

    /**
     * This method fetches the purchase items from the database.
     * It returns a collection of purchases items made by the user.
     */
    private ICollection<PurchaseItem> GetItems(Purchase purchase)
    {
        return ItemService!.GetWithQuery(
            q => q.Where(
                    i => i.PurchaseId == purchase.Id)
                .Include(i => ((PhysicalMedia)i.Product).Format)
                .Include(i => ((CinemaTicket)i.Product).Seat)
                .Include(i => ((CinemaTicket)i.Product).Function.Auditory.Cinema)
        )!;
    }
}