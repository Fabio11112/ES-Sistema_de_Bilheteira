@page "/AddedToCart/{id:int}"
@inherits AuthenticatedComponentBase
@using SistemaDeBilheteira.Components.Cards.AddedCart
@using SistemaDeBilheteira.Components.Cards
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Response

<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Montserrat|Poppins|Nunito">



<div class="background">
    <div class="flex">
        <div class="products">
            <AddedToCartItem MovieId="@id"></AddedToCartItem>
            
        </div>

        <div class="select">
            <ButtonsAddedCart></ButtonsAddedCart>
        </div>
    </div>
    <div class="button">
        <SearchButton></SearchButton>
    </div>
    <div class="carousel">
        <MovieCarousel Genre="@SelectedGenre"></MovieCarousel>
    </div>

</div>

@code{

    [Parameter]
    public int id { get; set; }

    [Parameter]
    public List<Movie>? Movies { get; set; } = new List<Movie>();
    [Parameter]
    public Response<Genre>? Genres { get; set; }
    
    private string SelectedGenre = "Fantasy";
     
    
    public const int TOTAL_PAGES = 9;

    protected override async Task OnParametersSetAsync()
    {
        var movieDeserializer = new Deserializer<Response<Movie>>();
        var genreDeserializer = new Deserializer<Response<Genre>>();

        //string movieUrl = $"{Environment.GetEnvironmentVariable("MOVIES_LINK")}/popular";
        string genreUrl = $"{Environment.GetEnvironmentVariable("GENRES_LINK")}";

        //Movies = await movieDeserializer.Fetch(movieUrl)!;
        Genres = await genreDeserializer.Fetch(genreUrl)!;

        //var movieGenres = Genres.Results.Where(item => Movies.Results.GenreIds.Contains(item.Id)).ToList();
      
      

        for (int page = 1; page <= TOTAL_PAGES; page++)
        {
            string apiLinkWithPage = $"https://api.themoviedb.org/3/movie/popular?language=en-US&page={page}";

            var movies = await movieDeserializer.Fetch(apiLinkWithPage)!;
            if(movies != null)
                Movies?.AddRange(movies.Results);
        }
    }

    List<Movie> GetMoviesByGenre(string genre)
    {
        var result = Genres.Genres.FirstOrDefault(x => x.Name == genre);
          
        return Movies?.Where(m => result != null && m.GenreIds.Contains(result.Id)).ToList() ?? new List<Movie>();
    }
}