@page "/LogIn"
@inherits AuthenticatedComponentBase
@using SistemaDeBilheteira.Components.Cards.Authentication
@using SistemaDeBilheteira.Services.AuthenticationService
@using SistemaDeBilheteira.Services.AuthenticationService.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager;

<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Konkhmer+Sleokchher|Montserrrat">

<div class="background flex">
    <Banner></Banner>

    <div class="sign-up">
        <div class="greetings">Hello Again!</div>
        <div class="get-started">Welcome Back</div>


        <EditForm Model="Model" OnValidSubmit="Login" FormName="user-login">
            <div class="flex input-element">
                <div class="logo"> <img class="user-logo" src="images/icons/profile/user.svg" alt=""/></div>
                <InputText @bind-Value="Model!.Email" id="email" type="email" placeholder="EMAIL ADDRESS"/>
            </div>
            <div class="flex input-element">
                <div class="logo"> <img src="images/icons/authentication/email.svg" alt=""/></div>
                <InputText @bind-Value="Model!.Password" id="password" type="password" placeholder="PASSWORD"/> 
            </div>

            <button type="submit" class="register">LOG IN</button>
            <a href="/SignUp" class="createAccount">CREATE AN ACCOUNT</a>
            

        </EditForm>
        <div class="message">@Message</div>
    </div>



</div>

@code {
    [SupplyParameterFromForm]
    private UserLoginModel? Model { get; set; } = new ();
    private string Message { get; set; } = string.Empty;

    /** 
     * This method logs in the user using the AuthService.
     */
    private async Task Login()
    {
        IResult result = await AuthService.LoginAsync(Model!);
        
        if (result.Success)
        {
            //do something
            Message = result.Message;
            NavigationManager.NavigateTo("/");
        }
        Message = result.Message;
    }
}