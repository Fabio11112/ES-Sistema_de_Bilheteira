@page "/LogIn"
@rendermode InteractiveServer
@using SistemaDeBilheteira.Components.Cards.Authentication
@using SistemaDeBilheteira.Services.AuthenticationService
@using SistemaDeBilheteira.Services.AuthenticationService.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager;

<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Konkhmer+Sleokchher|Montserrrat">

<div class="background flex">
    <Banner></Banner>

    <div class="sign-up">
        <div class="greetings">Hello Again!</div>
        <div class="get-started">Welcome Back</div>


        <form>
            <div class="flex input-element">
                <div class="logo"> <img class="user-logo" src="images/icons/profile/user.svg" alt=""/></div>
                <input @bind="Model.Email" id="emaol" type="email" placeholder="EMAIL ADDRESS"/>
            </div>
            <div class="flex input-element">
                <div class="logo"> <img src="images/icons/authentication/email.svg" alt=""/></div>
                <input @bind="Model.Password" id="password" type="password" placeholder="PASSWORD"/> 
            </div>

            <button type="button" @onclick="LogInAsync" class="register">LOG IN</button>

        </form>
        <div>@Message</div>
    </div>


</div>

@code {
    [CascadingParameter] private HttpContext? HttpContext { get; set; }
    private UserLoginModel? Model { get; set; } = new UserLoginModel();
    private string Message { get; set; } = string.Empty;

    private async Task LogInAsync()
    {
        IAuthResult result = await AuthService.LoginAsync(Model, HttpContext);
        if (result.Success)
        {
            //do something
            Message = result.Message;
            NavigationManager.NavigateTo("/Profile");
        }
        Message = result.Message;
    }
}