    @page "/UserInfo"
    @inherits AuthenticatedPage
    @attribute [Authorize]
    @rendermode InteractiveServer

    @using SistemaDeBilheteira.Components.Cards
    @using Microsoft.AspNetCore.Authorization
    @using SistemaDeBilheteira.Services.AuthenticationService.Models
    @using SistemaDeBilheteira.Services.Database.Builders
    @using SistemaDeBilheteira.Services.Database.Entities.PaymentSystem
    @using SistemaDeBilheteira.Services.IService
    @using SistemaDeBilheteira.Services.IService.ServiceManager
    @using SistemaDeBilheteira.Services.UI


    @inject IServiceManager ServiceManager
    @inject CardBuilder CardBuilder
    @inject NotificationService NotificationService

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat">
    <PageTitle>User Info</PageTitle>

    <div class="background">
        <div class="products">

            <EditForm class="form" OnValidSubmit="UpdateEmail" Model="User" FormName="user-Email">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <h3 class="title">User Info</h3>
                <p class="subtitle">Modify your Email</p>
                <div class="input-container">
                    <img src="images/icons/email.svg" alt="email" class="input-icon"/>
                    <div class="input-content">
                        <label class="input-label">EMAIL ADDRESS</label>
                        <InputText class="input-fields" placeholder="Enter your new email" @bind-Value="User!.Email"/>
                    </div>
                </div>
                <button class="submit-button" type="submit">Update Email</button>
            </EditForm>
            
            <EditForm Model="passwordModel" OnValidSubmit="UpdatePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p class="subtitlep">Modify your Password</p>
                <div class="input-container">
                    <img src="images/icons/lock.svg" alt="email" class="input-icon"/>
                    <div class="input-content">
                        <label class="input-label">OLD PASSWORD</label>
                        <InputText id="oldPassword" type="password" class="input-fields" @bind-Value="passwordModel.CurrentPassword" placeholder="Enter your old password"/>
                    </div>
                    <img src="images/icons/eye-icon.svg" alt="toggle" class="toggle-password" onclick="togglePassword('oldPassword', this)"/>
                </div>

                <div class="input-container">
                    <img src="images/icons/lock.svg" alt="lock" class="input-icon"/>
                    <div class="input-content">
                        <label class="input-label">NEW PASSWORD</label>
                        <InputText id="newPassword" type="password" class="input-fields" @bind-Value="passwordModel.NewPassword" placeholder="Enter your new password"/>
                    </div>
                    <img src="images/icons/eye-icon.svg" alt="toggle" class="toggle-password" onclick="togglePassword('newPassword', this)"/>
                </div>
                <button class="submit-button" type="submit">Update Password</button>
            </EditForm>
        </div>
    </div>
    

    <script src="scripts/UserInfoItem.js"></script>
    
    @code {
    [SupplyParameterFromForm] private UserRegisterModel? User { get; set; } = new();
    private PasswordModel passwordModel = new PasswordModel();

    //Method to update the email
    private async Task UpdateEmail()
    {
        var result = await AuthService.ChangeEmailAsync(User!.Email);
        NotificationService.Notify("Email updated successfully");
    }

    //Method to update the password
    private async Task UpdatePassword()
    {
        var result = await AuthService.ChangePasswordAsync(passwordModel.CurrentPassword, passwordModel.NewPassword);
        NotificationService.Notify("Password updated successfully");
    }
}


