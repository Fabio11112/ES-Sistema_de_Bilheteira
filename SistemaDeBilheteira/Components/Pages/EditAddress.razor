@page "/EditAddress"
@rendermode InteractiveServer
@attribute [Authorize]
@inherits AuthenticatedPage

@using Microsoft.AspNetCore.Authorization
@using SistemaDeBilheteira.Services.Database.Entities
@using SistemaDeBilheteira.Components.Cards.EditAdress
@using SistemaDeBilheteira.Services.AuthenticationService.Models
@using SistemaDeBilheteira.Services.Database.Builders
@using SistemaDeBilheteira.Services.Database.Entities.User
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager

@inject IServiceManager ServiceManager
@inject AddressBuilder AddressBuilder

<div class="background">
    <div class="address-form">
        <AddAddress
            Model="Model"
            OnValidSubmit="SubmitAddress">
        </AddAddress>
    </div>
    <div class="addresses">
        @if (Addresses is not { Count: > 0 })
        {
            <div class="message">
                No addresses have been added to this account yet!
            </div>
        }
        else
        {
            foreach (var address in Addresses!)
            {
                <AddressElement
                    Address="address"
                    Delete="DeleteAddress">
                </AddressElement>
            }
        }

    </div>
</div>

<div class="alert-warning">
    @Message
</div>


@code {
    [SupplyParameterFromForm] private AddressModel Model { get; set; } = new();
    private string Message { get; set; } = string.Empty;
    private ICollection<Address>? Addresses { get; set; } = new List<Address>();
    private IService<Address> AddressService { get; set; }


    /**
     * This method is called when the component is initialized.
     * It fetches the movie data from the API and sets the PosterPath and Type properties.
     */
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddressService = ServiceManager.GetService<Address>();
        Addresses = GetAddresses();
    }

    /**
     * This method is called when the form is submitted.
     * It creates a new address and adds it to the database.
     */
    private void SubmitAddress()
    {
        var address = AddressBuilder.WithStreetLine1(Model.StreetLine1)
            .WithStreetLine2(Model.StreetLine2!)
            .WithCity(Model.City)
            .WithState(Model.State)
            .WithCountry(Model.Country)
            .WithZipCode(Model.ZipCode)
            .WithIsDefault(false)
            .WithUserId(User!.Id)
            .Build();

        var result = AddressService.Add(address);
        Message = result.Message;


        Addresses = AddressService.GetAll();
        StateHasChanged();
    }
    
    /**
     * This method is called when the delete button is clicked.
     * It deletes the address from the database.
     */
    private void DeleteAddress(Address address)
    {
        var result = AddressService.Delete(address);
        Message = result.Message;
        Console.WriteLine("deleted");
        UpdateState();
    }
    
    /**
     * This method is called when the state is updated.
     * It fetches the addresses from the database and updates the state.
     */
    private void UpdateState()
    {
        Addresses = GetAddresses();
        StateHasChanged();
    }

    /**
     * This method fetches the addresses from the database.
     * It returns a collection of addresses.
     */
    private ICollection<Address> GetAddresses()
    {
        return AddressService.GetWithQuery(
            q=> q.Where(
                a => a.AppUserId == User!.Id)
            )!;
    }

}
