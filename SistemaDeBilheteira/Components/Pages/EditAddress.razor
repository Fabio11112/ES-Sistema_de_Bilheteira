@page "/EditAddress"
@rendermode InteractiveServer
@attribute [Authorize]
@inherits AuthenticatedComponentBase
@using Microsoft.AspNetCore.Authorization
@using SistemaDeBilheteira.Services.AuthenticationService.IService
@using SistemaDeBilheteira.Services.Database.Entities
@using SistemaDeBilheteira.Components.Cards.EditAdress
@using SistemaDeBilheteira.Services.AuthenticationService.Models
@using SistemaDeBilheteira.Services.Database.Builders
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager

@inject IServiceManager ServiceManager
@inject AddressBuilder AddressBuilder

<div class="background">
    <div class="address-form">
        <AddAddress
            Model="Model"
            OnValidSubmit="SubmitAddress">
        </AddAddress>
    </div>
    <div class="addresses">
        @foreach (var address in Addresses)
        {
            <AddressElement
                Address="address"
                Delete="(a) => DeleteAddress(a)">
            </AddressElement>
        }
    </div>
</div>

<div class="alert-warning">
    @Message
</div>


@code {
    [SupplyParameterFromForm] private AddressModel Model { get; set; } = new();
    private string Message { get; set; } = string.Empty;
    private ICollection<Address>? Addresses { get; set; } = new List<Address>();
    private IService<Address> AddressService { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AddressService = ServiceManager.GetService<Address>();
        Addresses = AddressService.GetAll();
    }

    
    private void SubmitAddress()
    {
        var address = AddressBuilder.WithStreetLine1(Model.StreetLine1)
            .WithStreetLine2(Model.StreetLine2!)
            .WithCity(Model.City)
            .WithState(Model.State)
            .WithCountry(Model.Country)
            .WithZipCode(Model.ZipCode)
            .WithIsDefault(false)
            .WithUserId(User!.Id)
            .Build();

        var result = AddressService.Add(address);
        Message = result.Message;


        Addresses = AddressService.GetAll();
        StateHasChanged();
    }

    private void DeleteAddress(Address address)
    {
        var result = AddressService.Delete(address);
        Message = result.Message;
        Console.WriteLine("deleted");
        UpdateState();
    }

    private void UpdateState()
    {
        Addresses = AddressService.GetAll();
        StateHasChanged();
    }

}
