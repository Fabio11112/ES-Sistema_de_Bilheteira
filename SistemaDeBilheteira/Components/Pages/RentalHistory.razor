@page "/RentalHistory"
@inherits AuthenticatedComponentBase
@using Microsoft.EntityFrameworkCore
@using SistemaDeBilheteira.Services.Database.Entities.PaymentSystem
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem.Rental
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager
@using SistemaDeBilheteira.Components.Cards.RentalHistory
@inject IServiceManager ServiceManager
@rendermode InteractiveServer

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat|Poppins">

<div class="background">
    <div class="flex title-logo">
        <img src="images/icons/rental/rentalHistory.svg" alt=""/>
        <div class="title">Rental History</div>
    </div>
    
    <div class="elements">
        @if (UserRentalItems != null && UserRentalItems.Any())
        {
            @foreach (var item in UserRentalItems)
            {
                var rental = (Rental)item!.Product;
                <div @key="item">
                    <RentalHistoryElement
                        Rental="@rental"
                        Purchase="@item.Purchase"
                        OnCancel="() => CancelRental((Rental)item.Product)">
                    </RentalHistoryElement>
                </div>
                
            }
        }
        else
        {
            <div class="empty-message">
                No rental history available
            </div>
        }
    </div>
</div>

@code {
    private List<PurchaseItem?>? UserRentalItems { get; set; } = [];
    private IService<PurchaseItem>? PurchaseItemService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PurchaseItemService = ServiceManager.GetService<PurchaseItem>();
        LoadUserRentals();
    }

    private void LoadUserRentals()
    {
        // get the rentals associated to the User
        UserRentalItems = PurchaseItemService!.GetWithQuery(
            q => q.Where(pi => pi.Purchase.AppUserId == User!.Id && 
                               pi.Product is Rental)
                 .Include(pi => pi.Purchase)
                 .Include(pi => pi.Product)
        )!.ToList()!;
        
    }

    private void CancelRental(Rental rental)
    {
        if (rental.StateName == "Cancelled") return;
        
        rental.Cancel();
        var rentalService = ServiceManager.GetService<Rental>();
        rentalService.Update(rental);
        LoadUserRentals();
    }
}