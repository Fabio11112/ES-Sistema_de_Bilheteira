@page "/SelectSession/{id:int}"
@inherits AuthenticatedComponentBase
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem
@using SistemaDeBilheteira.Services.IService.ServiceManager
@using SistemaDeBilheteira.Services.UI
@inject NavigationManager NavigationManager
@inject IServiceManager ServiceManager
@rendermode InteractiveServer
@inject SharedTicket SharedTicket 

<div class="session-selection-container">
    @if (movie != null)
    {
        <section class="banner">
            <div class="banner-wrapper">
                <img src="@($"https://image.tmdb.org/t/p/w1280{movie.BackdropPath}")" alt="@movie.Title" class="banner-image" />
                <div class="banner-title-overlay">
                    <h2 class="banner-title">@movie.Title</h2>
                    <p class="movie-overview">@movie.Overview</p>
                </div>
            </div>
            <div class="play-button-container">
                <img src="images/icons/MovieDescription/play.svg" alt="play" class="play-icon"/>
            </div>
        </section>
    }
    else
    {
        <p class="loading">Loading movie details...</p>
    }

    <div class="header-section">
        <h2 class="title">BUY TICKET</h2>
    </div>

    <div class="cinema-selector">
        @foreach (var cinema in cinemas)
        {
            <button class="cinema-option @(selectedCinema == cinema ? "selected" : "")" @onclick="() => SelectCinema(cinema)">
                @cinema
            </button>
        }
    </div>

    <div class="sessions-table">
        @foreach (var date in dates)
        {
            <div class="session-row">
                <div class="date-cell">@date.Value</div>
                @foreach (var time in timeSlots)
                {
                    <div class="time-cell">
                        <button class="time-slot @(IsSelectedSession(selectedCinema, date.Key, time) ? "selected" : "")"
                                @onclick="() => SelectSessionHandler(selectedCinema, date.Key, time)">
                            @time
                        </button>
                    </div>
                }
            </div>
        }
    </div>

    @if (movie != null)
    {
        <div class="action-buttons">
            <button class="primary-button" @onclick="SaveSelectedFunctionAsync">
                CONFIRM SELECTION
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Movie? movie;

    private List<string> cinemas = new()
    {
        "Madeira Movie Center",
        "Cinemas NOS",
        "Cine Place"
    };

    private Dictionary<string, string> dates = new()
    {
        { "Today", "Today" },
        { "Tomorrow", "Tomorrow" },
        { "Tuesday", "Tuesday - 28/03" },
        { "Wednesday", "Wednesday - 29/03" },
        { "Thursday", "Thursday - 30/03" },
        { "Friday", "Friday - 31/03" },
        { "Saturday", "Saturday - 01/04" },
        { "Sunday", "Sunday - 02/04" }
    };

    private List<string> timeSlots = new() { "14:30", "17:30", "20:30" };

    private string? selectedCinema;
    private SelectedSession? selectedSession;

    private class SelectedSession
    {
        public string Cinema { get; set; } = string.Empty;
        public string DateKey { get; set; } = string.Empty;
        public string DateDisplay { get; set; } = string.Empty;
        public string Time { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var movieDeserializer = new Deserializer<Movie>();
        string? movieUrl = Environment.GetEnvironmentVariable("MOVIES_LINK");
        movie = await movieDeserializer.Fetch($"{movieUrl}/{id}");
    }

    private void SelectCinema(string cinema)
    {
        selectedCinema = cinema;
    }

    private bool IsSelectedSession(string cinema, string dateKey, string time)
    {
        return selectedSession != null &&
               selectedSession.Cinema == cinema &&
               selectedSession.DateKey == dateKey &&
               selectedSession.Time == time;
    }

    private void SelectSessionHandler(string cinema, string dateKey, string time)
    {
        selectedSession = new SelectedSession
        {
            Cinema = cinema,
            DateKey = dateKey,
            DateDisplay = dates[dateKey],
            Time = time
        };
    }

    private async Task SaveSelectedFunctionAsync()
    {
        if (selectedSession == null)
            return;

        var functionService = ServiceManager.GetService<Function>();

        var cinemaService = ServiceManager.GetService<Cinema>();
        var allCinemas = cinemaService.GetAll();
        var selectedCinemaEntity = allCinemas?.FirstOrDefault(c => c.Name == selectedSession.Cinema);
        if (selectedCinemaEntity == null)
            throw new Exception("Selected cinema not found");

        var auditoryService = ServiceManager.GetService<Auditory>();
        var firstAuditory = auditoryService.GetAll()?.FirstOrDefault();
        if (firstAuditory == null)
            throw new Exception("No auditory available");

        // Fecha real
        DateTime date;
        if (selectedSession.DateKey == "Today")
            date = DateTime.Today;
        else if (selectedSession.DateKey == "Tomorrow")
            date = DateTime.Today.AddDays(1);
        else
            date = DateTime.ParseExact(
                selectedSession.DateDisplay.Split('-').Last().Trim(),
                "dd/MM",
                null
            ).AddYears(DateTime.Today.Year);

        var time = TimeSpan.Parse(selectedSession.Time);
        var dateTime = date.Date + time;

        var newFunction = new Function
        {
            Date = dateTime,
            Price = 7.5,
            AuditoryId = firstAuditory.Id, 
            Auditory = firstAuditory
        };

        var result = functionService.Add(newFunction);

        if (!result.Success)
            throw new Exception(result.Message);

        NavigationManager.NavigateTo($"/QuantityOfTickets/{movie.Id}?cinema={Uri.EscapeDataString(selectedSession.Cinema)}&date={Uri.EscapeDataString(selectedSession.DateKey)}&time={Uri.EscapeDataString(selectedSession.Time)}");

    }
}
