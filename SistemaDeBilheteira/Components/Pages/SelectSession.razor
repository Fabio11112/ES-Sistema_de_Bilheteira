@page "/SelectSession/{id:int}"
@inherits AuthenticatedPage
@using System.Globalization
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Response
@using SistemaDeBilheteira.Services.Database.Builders.CinemaSystemBuilder
@using SistemaDeBilheteira.Services.Database.Entities.CinemaSystem
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager
@using SistemaDeBilheteira.Services.Database.Builders
@using SistemaDeBilheteira.Services.UI
@inject SharedTicket SharedTicket 
@inject NavigationManager NavigationManager
@inject IServiceManager ServiceManager
@inject FunctionBuilder FunctionBuilder
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager Navigation;
@rendermode InteractiveServer

<div class="session-selection-container">
    @if (movie != null)
    {
        <section class="banner">
            <div class="banner-wrapper">
                <img src="@($"https://image.tmdb.org/t/p/w1280{movie.BackdropPath}")" alt="@movie.Title" class="banner-image" />
                <div class="banner-title-overlay">
                    <h2 class="banner-title">@movie.Title</h2>
                    <p class="movie-overview">@movie.Overview</p>
                </div>
            </div>
            <a class="play-button-container" @onclick="OpenTrailer">
                <img src="images/icons/MovieDescription/play.svg" alt="Play Trailer" class="play-icon" />
            </a>
        </section>
    }
    else
    {
        <p class="loading">Loading movie details...</p>
    }

    <div class="header-section">
        <h2 class="title">BUY TICKET</h2>
    </div>

    <div class="cinema-selector">
        @foreach (var cinema in Cinemas)
        {
            <button class="cinema-option @(SelectedCinema == cinema ? "selected" : "")" @onclick="() => SelectCinema(cinema)">
                @cinema.Name
            </button>
        }
    </div>

    <div class="sessions-table">
        @foreach (var date in Dates)
        {
            <div class="session-row">
                <div class="date-cell">@PrintDay(date.Value)</div>
                @foreach (var time in TimeSlots)
                {
                    <div class="time-cell">
                        <button class="time-slot @(IsSelectedSession(date.Value, time) ? "selected" : "")"
                                @onclick="() => SelectSessionHandler(date.Value, time)">
                            @time.ToString(@"hh\:mm")
                        </button>
                    </div>
                }
            </div>
        }
    </div>

    @if (movie != null)
    {
        <div class="action-buttons">
            <button class="primary-button" @onclick="SaveSelectedFunctionAsync">
                CONFIRM SELECTION
            </button>
        </div>
    }

    @if (showTrailerModal && Trailers?.Results.Count > 0)
    {
        <div class="trailer-modal" @onclick="CloseTrailer">
            <div class="modal-content" @onclick:stopPropagation>
                <button class="close-button" @onclick="CloseTrailer">&times;</button>
                <iframe width="100%" height="100%" 
                        src="@($"https://www.youtube.com/embed/{Trailers.Results[0].Key}?autoplay=1")" 
                        frameborder="0" 
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                        allowfullscreen>
                </iframe>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Movie? movie;
    private IService<Cinema>? CinemaService { get; set; }
    private IService<Function> FunctionService { get; set; }
    private IService<Auditory> AuditoriumService { get; set; }
    
    private ICollection<Cinema> Cinemas { get; set; } = new List<Cinema>();
    
    private Cinema? SelectedCinema { get; set; }
    private TimeSpan? SelectedSession { get; set; }
    private DateTime? SelectedDay { get; set; }

    private bool showTrailerModal = false;
    private Response<Video>? Trailers;
    
    private Dictionary<string, DateTime?> Dates { get; set; } = new()
    {
        { "Today", null },
        { "Tomorrow", null },
        { "Tuesday", null },
        { "Wednesday", null },
        { "Thursday", null },
        { "Friday", null },
        { "Saturday", null },
        { "Sunday", null }
    };

    private List<TimeSpan> TimeSlots { get; set; } =
    [
        TimeSpan.FromHours(14).Add(TimeSpan.FromMinutes(30)), //14:30
        TimeSpan.FromHours(17).Add(TimeSpan.FromMinutes(30)), //17:30
        TimeSpan.FromHours(20).Add(TimeSpan.FromMinutes(30))  //20:30
    ];

    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CinemaService = ServiceManager.GetService<Cinema>();
        AuditoriumService = ServiceManager.GetService<Auditory>();
        FunctionService = ServiceManager.GetService<Function>();
        var videoDeserializer = new Deserializer<Response<Video>>();

        
        Cinemas = CinemaService.GetWithQuery(
            q => q.Include(c => c.Auditoriums))!;
        PopulateDays();
        var movieDeserializer = new Deserializer<Movie>();
        var movieUrl = Environment.GetEnvironmentVariable("MOVIES_LINK");
        movie = await movieDeserializer.Fetch($"{movieUrl}/{id}")!;
        Trailers = await videoDeserializer.Fetch($"{movieUrl}/{id}/videos")!;

    }
    
    // Method to select a cinema
    private void SelectCinema(Cinema cinema)
    {
        SelectedCinema = cinema;
    }

    // Method to select a session
    private void SelectSessionHandler(DateTime? day, TimeSpan? time)
    {
        if (day == null || time == null) return;
        
        SelectedDay = day;
        SelectedSession = time;
    }

    // Method to check if a session is selected
    private bool IsSelectedSession(DateTime? day, TimeSpan time)
    {
        return SelectedDay == day && SelectedSession == time;
    } 
    
    // Method to save the selected function
    private async Task SaveSelectedFunctionAsync()
    {
        if (SelectedDay == null || SelectedSession == null || SelectedCinema == null)
            return;

        var function = GetOrGenerateFunction();
        
        if (function == null) return;

        try
        {

            await SessionStorage.SetItemAsync("functionId", function.Id);

            Navigation.NavigateTo($"/QuantityOfTickets/{id}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.StackTrace);
        }


    }

    // Method to get or generate a function
    private Function? GetOrGenerateFunction()
    {
        var functionDate = SelectedDay!.Value.Add(SelectedSession!.Value);
        
        var auditoriumId = GetRandomAuditoriumId();

        if (auditoriumId == Guid.Empty)
            return null;

        var functionDb = FunctionService.GetWithQuery(
            q => q.Where(
                f =>f.Date == functionDate && f.AuditoryId == auditoriumId
            ))!.ToList();

        Function ticketFunction;
        
        if (functionDb is not{Count: > 0})
        {
            ticketFunction = FunctionBuilder.WithDate(functionDate)
                .WithAuditory(auditoriumId)
                .Build();
            
            FunctionService.Add(ticketFunction);
        }
        else
        {
            ticketFunction = functionDb.FirstOrDefault()!;
        }
        return ticketFunction;
    }

    // Method to populate the days of the week
    private void PopulateDays()
    {
        Dates["Today"] = DateTime.Today;
        var previousDay = "Today";
        TimeSpan oneDay = TimeSpan.FromDays(1);
        
        foreach (var day in Dates.Keys.Skip(1))
        {
            Dates[day] = Dates[previousDay]!.Value.Add(oneDay);
            previousDay = day;
        }
    }

    // Method to print the day
    private string PrintDay(DateTime? date)
    {
        if (date == DateTime.Today) return "Today";
        if (date == DateTime.Today.Add(TimeSpan.FromDays(1))) return "Tomorrow";

        return date?.ToString("dddd - dd/MM/yyyy", new CultureInfo("en-US")) ?? string.Empty;
    }

    // Method to get a random auditorium ID
    private Guid GetRandomAuditoriumId()
    {
        
        var auditoriums = SelectedCinema!.Auditoriums.ToList();
        
        if (auditoriums is not { Count: > 0 }) return Guid.Empty;
        
        var random = new Random();
        return auditoriums[random.Next(auditoriums.Count)].Id;
    }

    private void OpenTrailer()
    {
        showTrailerModal = true;
        StateHasChanged();
    }

    private void CloseTrailer()
    {
        showTrailerModal = false;
        StateHasChanged();
    }

    
}
