@page "/SelectType/{id:int}"
@rendermode InteractiveServer
@inherits AuthenticatedComponentBase
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Response
@using SistemaDeBilheteira.Services.AuthenticationService.IService
@using SistemaDeBilheteira.Services.Database.Builders
@using SistemaDeBilheteira.Services.Database.Entities
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem.Rental
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem.Rental.RentalStates
@using SistemaDeBilheteira.Services.IService.ServiceManager

@inject IServiceManager ServiceManager
@inject NavigationManager NavigationManager
@inject RentalBuilder RentalBuilder
@inject ShoppingCartItemBuilder ShoppingCartItemBuilder

<div class="container">
    @if (movie != null)
    {
        <section class="banner">
            <div class="banner-wrapper">
                <img src="@($"https://image.tmdb.org/t/p/w1280{movie.BackdropPath}")" alt="@movie.Title" class="banner-image" />
                <div class="banner-title-overlay">
                    <h2 class="banner-title">@movie.Title</h2>
                    <p class="movie-overview">@movie.Overview</p>
                </div> 
            </div>
            <div class="play-button-container">
                <img src="images/icons/MovieDescription/play.svg" alt="play" class="play-icon"/>
            </div>
        </section>

        <section class="movie-details">
            <div class="movie-details-wrapper">
                <div class="imdb-rating">
                    <p class="movie-release-date">IMDB @Math.Round(movie.VoteAverage, 1)</p>
                    <p class="movie-release-date">
                        @(movie.ReleaseDate.HasValue ? movie.ReleaseDate.Value.ToString("yyyy-MM-dd") : "Unknown") â€¢ PG12  â€¢ @FormatRuntime(movie.Runtime)
                    </p>
                </div>

                <div class="genres-container">
                    @foreach (var genre in genreNames)
                    {
                        <span class="genre-badge">@genre</span>
                    }
                </div>

                <div class="actions-container">
                    <div class="action-buttons">
                        <div class="watch-later-button">
                            <img src="images/icons/MovieDescription/add.svg" alt="Watch later" class="button-icon"/>
                            <p class="button-text">Watch Later</p>
                        </div>
                        <div class="share-button">
                            <img src="images/icons/MovieDescription/share.svg" alt="Share" class="button-icon"/>
                            <p class="button-text">Share</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="actions-container1">
                <div class="rent-buy-container">
                    <!-- Rent Button -->
                    <a class="secondary-button" @onclick="AddShoppingCartItem">
                        Rent<span class="text-sm font-normal"> HD @rental?.Price â‚¬</span>
                    </a>

                    <!-- Buy Button + Dropdown -->
                    <div class="buy-button-wrapper" style="position: relative;">
                        <a @onclick="ToggleDropdown" class="secondary-button">
                            Buy
                        </a>

                        @if (showDropdown)
                        {
                            <div class="buy-dropdown show">
                                <div class="buy-dropdown-item">
                                    <div>
                                        Buy DVD<br />
                                        <span class="button-price">HD 12.99â‚¬</span>
                                    </div>
                                    <span>ðŸ“€</span>
                                </div>
                                <div class="buy-dropdown-item">
                                    <div>
                                        Buy Blu-Ray<br />
                                        <span class="button-price">HD 12.99â‚¬</span>
                                    </div>
                                    <span>ðŸ’¿</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </section>
    }
    else
    {
        <p class="loading">Loading movie details...</p>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private Movie? movie;
    private List<string> genreNames = new();
    private bool showDropdown = false;
    private Rental? rental = null;

    private IService<Rental> RentalService { get; set; }
    private IService<ShoppingCartItem> ShoppingCartItemService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        RentalService = ServiceManager.GetService<Rental>();
        ShoppingCartItemService = ServiceManager.GetService<ShoppingCartItem>();

        rental = AddRental();

        var movieDeserializer = new Deserializer<Movie>();
        string? movieUrl = Environment.GetEnvironmentVariable("MOVIES_LINK");
        movie = await movieDeserializer.Fetch($"{movieUrl}/{id}")!;
    }

    private string FormatRuntime(int runtime)
    {
        var hours = runtime / 60;
        var minutes = runtime % 60;
        return $"{hours}h {minutes}m";
    }

    private void ToggleDropdown() => showDropdown = !showDropdown;

    private Rental AddRental()
    {
        var rentals = RentalService.GetAll().Where(r => r.MovieId == id.ToString());
        if (rentals.Any())
            return rentals.First();

        var newRental = RentalBuilder.WithMovie(id.ToString())
            .WithPrice(GeneratedPrice())
            .WithStartDate(DateTime.Now)
            .WithEndDate(DateTime.Now.AddDays(7))
            .WithState(new RequestedState())
            .Build();

        RentalService.Add(newRental!);
        return newRental!;
    }

    private double GeneratedPrice() => 9.99;

    private void AddShoppingCartItem()
    {

        var item = ShoppingCartItemService.GetAll()
            .FirstOrDefault(i => i.AppUserId == User.Id && i.ProductId == rental.Id);

        if (item != null)
        {
            UpdateItem(item);
        }
        else
        {
            AddItem();
        }
    }

    private void UpdateItem(ShoppingCartItem item)
    {
        item.Quantity++;
        ShoppingCartItemService.Update(item);
    }

    private void AddItem()
    {
        if (rental?.Id == null) return;

        var shoppingCartItem = ShoppingCartItemBuilder.WithAppUserId(User.Id!)
            .WithProductId(rental.Id)
            .WithQuantity(1)
            .Build();

        ShoppingCartItemService.Add(shoppingCartItem!);
    }
}
