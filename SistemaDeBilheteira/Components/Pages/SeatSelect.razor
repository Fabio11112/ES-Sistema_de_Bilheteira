@page "/SeatSelect/{id:int}"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@rendermode InteractiveServer

<h3 class="Title">Seat Selection</h3>

@if (string.IsNullOrEmpty(Cinema) || string.IsNullOrEmpty(DateKey) || string.IsNullOrEmpty(Time))
{
    <p>Return and select a valid Session</p>
}
else
{
    <p class="Text"><strong>Cine:</strong> @Cinema</p>
    <p class="Text"><strong>Fecha:</strong> @DateKey</p>
    <p class="Text"><strong>Hora:</strong> @Time</p>

    <div class="seat-map">
        @foreach (var row in SeatRows)
        {
            <div class="seat-row">
                @foreach (var seat in row)
                {
                    <button class="seat-button @(seat.IsSelected ? "selected" : "")"
                            disabled="@seat.IsReserved"
                            @onclick="() => ToggleSeatSelection(seat)">
                        @seat.Label
                    </button>
                }
            </div>
        }
    </div>

    <button class="primary-button" @onclick="ConfirmSelection">Confirmar Selección</button>
}

@code {
    [Parameter] public int id { get; set; }
    public string? Cinema { get; set; }
    public string? DateKey { get; set; }
    public string? Time { get; set; }

    private List<List<Seat>> SeatRows = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        Cinema = query.TryGetValue("cinema", out var cinema) ? cinema.ToString() : null;
        DateKey = query.TryGetValue("date", out var date) ? date.ToString() : null;
        Time = query.TryGetValue("time", out var time) ? time.ToString() : null;

        LoadSeats();
    }

    private void LoadSeats()
    {
        string[] rowLabels = { "A", "B", "C", "D", "E", "F" };
        int seatCount = 9;

        SeatRows.Clear();

        foreach (var rowLabel in rowLabels)
        {
            var row = new List<Seat>();
            for (int i = 1; i <= seatCount; i++)
            {
                row.Add(new Seat
                {
                    Label = $"{rowLabel}{i}",
                    IsReserved = false,
                    IsSelected = false
                });
            }
            SeatRows.Add(row);
        }
    }

    private void ToggleSeatSelection(Seat seat)
    {
        if (seat.IsReserved) return;

        foreach (var row in SeatRows)
        {
            foreach (var s in row)
            {
                s.IsSelected = false;
            }
        }

        seat.IsSelected = true;
    }

    private void ConfirmSelection()
    {
        var selectedSeat = SeatRows.SelectMany(r => r).FirstOrDefault(s => s.IsSelected);
        if (selectedSeat != null)
        {
            // Aquí puedes agregar la lógica para guardar la selección en la base de datos
            Console.WriteLine($"Asiento seleccionado: {selectedSeat.Label}");
            Console.WriteLine($"Cine: {Cinema}, Fecha: {DateKey}, Hora: {Time}, Película ID: {id}");
            // Redirigir o mostrar mensaje de éxito
        }
        else
        {
            Console.WriteLine("Por favor, seleccione un asiento.");
        }
    }

    private class Seat
    {
        public string Label { get; set; } = string.Empty;
        public bool IsReserved { get; set; }
        public bool IsSelected { get; set; }
    }
}
