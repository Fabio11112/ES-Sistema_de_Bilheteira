@page "/SeatSelect/{id:int}"
@inherits AuthenticatedComponentBase
@inject NavigationManager NavigationManager
@inject IServiceManager ServiceManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject SeatBuilder SeatBuilder
@inject CinemaTicketBuilder TicketBuilder
@inject ShoppingCartItemBuilder CartItemBuilder
@inject NotificationService NotificationService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using SistemaDeBilheteira.Services.Database.Builders
@using SistemaDeBilheteira.Services.Database.Builders.CinemaSystemBuilder
@using SistemaDeBilheteira.Services.Database.Entities.ProductSystem
@using SistemaDeBilheteira.Services.Database.Entities.ShoppingCart
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager
@using SistemaDeBilheteira.Components
@using SistemaDeBilheteira.Services.UI
@attribute [Authorize]

@rendermode InteractiveServer




<div class="seat-selection-container">
    <h3 class="Title">Seat Selection</h3>

    @if (TicketQuantity <= 0 )
    {
        <p class="Text">Please return and select a valid session and ticket quantity</p>
    }
    else
    {
        <div class="ticket-info">
            <p class="Text"><strong>Cinema:</strong> @Function!.Auditory.Cinema!.Name</p>
            <p class="Text"><strong>Date:</strong> @Function.Date.ToString("dd/MM/yyyy")</p>
            <p class="Text"><strong>Time:</strong> @Function.Date.ToString("HH:mm")</p>
            <p class="Text"><strong>Tickets:</strong> @TicketQuantity</p>
        </div>

        <div class="screen-container">
            <div class="screen">SCREEN</div>
        </div>

        @if (SelectedSeats!.Count > 0)
        {
            <div class="selected-seats">
                @foreach (var seat in SelectedSeats)
                {
                    <div class="selected-seat-tag">
                        @seat.Letter@seat.Number
                        <button class="remove-seat" @onclick="() => RemoveSeat(seat)">Ã—</button>
                    </div>
                }
            </div>
        }

        <div class="seat-map">
            @foreach (var row in SeatsRows!)
            {
                <div class="seat-row">
                    @foreach (var seat in row)
                    {
                        <button class="seat-button @(IsReserved(seat) ? "reserved" : IsSelected(seat) ? "selected" : "available"))"
                                disabled="@(IsReserved(seat) || (SelectedSeats.Count >= TicketQuantity && !IsSelected(seat)))"
                                @onclick="() => ToggleSeatSelection(seat)">
                            @seat.Number@seat.Letter
                        </button>
                    }
                </div>
            }
        </div>

        <button class="primary-button" @onclick="ConfirmSelection" disabled="@(SelectedSeats.Count != TicketQuantity)">
            Confirm Selection (@SelectedSeats.Count/@TicketQuantity)
        </button>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    private int TicketQuantity { get; set; }
    private Function? Function { get; set; }

    
    private ICollection<ICollection<Seat>>? SeatsRows{ get; set; }
    private ICollection<Seat>? ReservedSeats { get; set; }
    private ICollection<Seat>? SelectedSeats { get; set; }
    
    private IService<Seat>? SeatService { get; set; }
    private IService<Function>? FunctionService { get; set; }
    private IService<CinemaTicket>? TicketService { get; set; }
    private IService<ShoppingCartItem>? ItemService { get; set; }
    
    private string[] rowLabels = ["A", "B", "C", "D", "E", "F"];

    private bool _initialized = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (User == null )
        {
            NotificationService.Notify("You must be logged in to access this page");
            NavigationManager.NavigateTo("/Identity/Account/Login", true); 
            return;
        }
        
        FunctionService = ServiceManager.GetService<Function>();
        SeatService = ServiceManager.GetService<Seat>();
        TicketService = ServiceManager.GetService<CinemaTicket>();
        ItemService = ServiceManager.GetService<ShoppingCartItem>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!(firstRender && !_initialized))
            return;
        
        Function = LoadFunction(await SessionStorage.GetItemAsync<Guid>("functionId"));
        TicketQuantity = await SessionStorage.GetItemAsync<int>("quantity");
        LoadSeats();
        ReservedSeats = GetReservedSeats();
        SelectedSeats = new List<Seat>();
        _initialized = true;
        StateHasChanged();
    }

    private Function LoadFunction(Guid functionId)
    {
        return FunctionService!.GetWithQuery(
            q => q.Where(
                f => f.Id == functionId)
                .Include(f => f.Auditory)
                .ThenInclude(a => a.Cinema))!.FirstOrDefault()!;
    }
    
    private void LoadSeats()
    {
        if (!AreThereSeatsInDatabase())
            CreateSeats();
        
        SeatsRows = GetSeatRows();
    }

    private ICollection<Seat> GetReservedSeats()
    {
        ICollection<Seat> seats = new List<Seat>();

        var tickets = GetTicketsFromFunction();
        
        foreach (var ticket in tickets!)
            seats.Add(ticket.Seat);
        
        return seats;
    }

    private ICollection<CinemaTicket>? GetTicketsFromFunction()
    {
        return TicketService!.GetWithQuery(
            q => q.Where(
                    t => t.FunctionId == Function!.Id)
                .Include(t => t.Seat));
    }

    private bool AreThereSeatsInDatabase()
    {
        return SeatService!.GetWithQuery(
            q => q.Where(
                s => s.AuditoryId == Function!.AuditoryId))!.Any();
    }

    private void CreateSeats()
    {
        const int seatCount = 9;
        
        foreach (var rowLabel in rowLabels)
        {
            for (var i = 1; i <= seatCount; i++)
            {
                var newSeat = SeatBuilder.WithAuditory(Function!.AuditoryId)
                    .WithLetter(rowLabel)
                    .WithNumber(i)
                    .Build();

                SeatService!.Add(newSeat);
            }
        }
    }

    private ICollection<ICollection<Seat>> GetSeatRows()
    {
        ICollection<ICollection<Seat>> seatsRows = new List<ICollection<Seat>>();
        foreach (var row in rowLabels)
        {
            var seatRow = SeatService!.GetWithQuery(
                q => q.Where(
                        s => s.Letter == row && s.AuditoryId == Function!.AuditoryId)
                    .OrderBy(s => s.Number));
            
            seatsRows.Add(seatRow!);
        }

        return seatsRows;
    }
    
    
    private void ToggleSeatSelection(Seat seat)
    {
        if (IsReserved(seat)) return;

        if (IsSelected(seat))
        {
            SelectedSeats!.Remove(seat);
        }
        else if (SelectedSeats!.Count < TicketQuantity)
        {
            SelectedSeats.Add(seat);
        }
    }

    private void RemoveSeat(Seat seat)
    {
        SelectedSeats!.Remove(seat);
    }

    private async Task ConfirmSelection()
    {
        if (SelectedSeats!.Count != TicketQuantity) return;

        foreach (var seat in SelectedSeats)
        {
            SaveTicketInCart(seat);
        }

        await SessionStorage.RemoveItemsAsync(["quantity, functionId"]);
        
        // Navigate to next page with selected parameters
        NavigationManager.NavigateTo($"/AddedToCart/{id}");
    }

    private void SaveTicketInCart(Seat seat)
    {

        if (Function == null)
        throw new InvalidOperationException("Function is null in SaveTicketInCart");
        if (TicketService == null)
            throw new InvalidOperationException("TicketService is null");
        if (CartItemBuilder == null)
            throw new InvalidOperationException("CartItemBuilder is null");
        if (ItemService == null)
            throw new InvalidOperationException("ItemService is null");
        if (User == null)
            throw new InvalidOperationException("User is null");

        var ticket = TicketBuilder.WithFunction(Function!.Id)
            .WithPrice(GetPrice())
            .WithSeat(seat.Id)
            .WithMovieId(id.ToString())
            .Build();

        TicketService!.Add(ticket!);

        var item = CartItemBuilder.WithQuantity(1)
            .WithProductId(ticket!.Id)
            .WithAppUserId(User!.Id)
            .Build();

        ItemService!.Add(item!);
    }
    
    private double GetPrice() =>  9.99;

    private bool IsSelected(Seat seat) => SelectedSeats!.Contains(seat);
    
    private bool IsReserved(Seat seat) => ReservedSeats!.Contains(seat);
    }

} 