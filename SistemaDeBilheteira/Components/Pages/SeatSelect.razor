@page "/SeatSelect/{id:int}"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@rendermode InteractiveServer

<div class="seat-selection-container">
    <h3 class="Title">Seat Selection</h3>

    @if (TicketQuantity <= 0 )
    {
        <p class="Text">Please return and select a valid session and ticket quantity</p>
    }
    else
    {
        <div class="ticket-info">
            <p class="Text"><strong>Cinema:</strong> @Cinema</p>
            <p class="Text"><strong>Date:</strong> @DateKey</p>
            <p class="Text"><strong>Time:</strong> @Time</p>
            <p class="Text"><strong>Tickets:</strong> @TicketQuantity</p>
        </div>

        <div class="screen-container">
            <div class="screen">SCREEN</div>
        </div>

        @if (SelectedSeats.Count > 0)
        {
            <div class="selected-seats">
                @foreach (var seat in SelectedSeats)
                {
                    <div class="selected-seat-tag">
                        @seat.Label
                        <button class="remove-seat" @onclick="() => RemoveSeat(seat)">Ã—</button>
                    </div>
                }
            </div>
        }

        <div class="seat-map">
            @foreach (var row in SeatRows)
            {
                <div class="seat-row">
                    @foreach (var seat in row)
                    {
                        <button class="seat-button @(seat.IsReserved ? "reserved" : seat.IsSelected ? "selected" : "available")"
                                disabled="@(seat.IsReserved || (SelectedSeats.Count >= TicketQuantity && !seat.IsSelected))"
                                @onclick="() => ToggleSeatSelection(seat)">
                            @seat.Label
                        </button>
                    }
                </div>
            }
        </div>

        <button class="primary-button" @onclick="ConfirmSelection" disabled="@(SelectedSeats.Count != TicketQuantity)">
            Confirm Selection (@SelectedSeats.Count/@TicketQuantity)
        </button>
    }
</div>

@code {
    [Parameter] public int id { get; set; }
    public string? Cinema { get; set; }
    public string? DateKey { get; set; }
    public string? Time { get; set; }
    public int TicketQuantity { get; set; }

    private List<Seat> SelectedSeats = new();
    private List<List<Seat>> SeatRows = new();

    protected override void OnInitialized()
    {
        
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

  
        
        if (query.TryGetValue("quantity", out var quantity) && int.TryParse(quantity, out int qty))
        {
            TicketQuantity = qty;
        }

        LoadSeats();
    }

    private void LoadSeats()
    {
        string[] rowLabels = { "A", "B", "C", "D", "E", "F" };
        int seatCount = 9;
        var random = new Random();

        SeatRows.Clear();

        foreach (var rowLabel in rowLabels)
        {
            var row = new List<Seat>();
            for (int i = 1; i <= seatCount; i++)
            {
                // Randomly reserve some seats for demonstration
                bool isReserved = random.Next(0, 5) == 0;
                row.Add(new Seat
                {
                    Label = $"{rowLabel}{i}",
                    IsReserved = isReserved,
                    IsSelected = false
                });
            }
            SeatRows.Add(row);
        }
    }

    private void ToggleSeatSelection(Seat seat)
    {
        if (seat.IsReserved) return;

        if (seat.IsSelected)
        {
            // Deselect the seat
            seat.IsSelected = false;
            SelectedSeats.Remove(seat);
        }
        else if (SelectedSeats.Count < TicketQuantity)
        {
            // Select the seat
            seat.IsSelected = true;
            SelectedSeats.Add(seat);
        }
    }

    private void RemoveSeat(Seat seat)
    {
        seat.IsSelected = false;
        SelectedSeats.Remove(seat);
        
        // Find the seat in the SeatRows and update its status
        foreach (var row in SeatRows)
        {
            var seatToUpdate = row.FirstOrDefault(s => s.Label == seat.Label);
            if (seatToUpdate != null)
            {
                seatToUpdate.IsSelected = false;
                break;
            }
        }
    }

    private void ConfirmSelection()
    {
        if (SelectedSeats.Count == TicketQuantity)
        {
            // Create comma-separated list of selected seats
            var seats = string.Join(",", SelectedSeats.Select(s => s.Label));
            
            // Navigate to next page with selected parameters
            NavigationManager.NavigateTo(
                $"/AddedToCart/{id}" +
                $"?cinema={Uri.EscapeDataString(Cinema!)}" +
                $"&date={Uri.EscapeDataString(DateKey!)}" +
                $"&time={Uri.EscapeDataString(Time!)}" +
                $"&seats={Uri.EscapeDataString(seats)}" +
                $"&quantity={TicketQuantity}");
        }
    }

    private class Seat
    {
        public string Label { get; set; } = string.Empty;
        public bool IsReserved { get; set; }
        public bool IsSelected { get; set; }
    }
}