@page "/Cart"
@inherits AuthenticatedComponentBase
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using SistemaDeBilheteira.Components.Cards.Cart
@using SistemaDeBilheteira.Services.Database.Entities.PaymentSystem
@using SistemaDeBilheteira.Services.Database.Entities.ShoppingCart
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager
@inject IServiceManager ServiceManager
@inject IPurchaseSystem PurchaseSystem
@inject NavigationManager Navigation


<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Montserrat|Poppins|Nunito">

<div class="background">
    <div class="logo">
        <img class="cart-image" src="images/icons/cart/cart.svg" alt="cart" />
        <div class="title">MY CART</div>
    </div>

    <div class="flex">
        <div class="products">
            @foreach (var item in Items)
            {
                <div @key="item">
                    <CartItemElement
                        Item="@item"
                        Delete="(cartItem) => DeleteCartItem(cartItem)">
                    </CartItemElement>
                </div>
            }
        </div>

        <div class="payment">
            <PromoCode></PromoCode>
            <PaymentMethodElement Total="@Total" OnPay="Pay" />
        </div>
    </div>
</div>

@code {
    private ICollection<ShoppingCartItem> Items { get; set; } = new List<ShoppingCartItem>();
    private IService<ShoppingCartItem>? ItemService { get; set; }
    private IService<PaymentMethod>? PaymentMethodService { get; set; }

    private decimal ShippingCost => 10;

    private decimal Total => Items.Sum(i => (decimal)i.Product.Price * i.Quantity) + ShippingCost;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ItemService = ServiceManager.GetService<ShoppingCartItem>();
        PaymentMethodService = ServiceManager.GetService<PaymentMethod>();
        Items = GetCartElements()!;
    }

    private void DeleteCartItem(ShoppingCartItem item)
    {
        Items.Remove(item);
        ItemService?.Delete(item);
    }

    private ICollection<ShoppingCartItem>? GetCartElements()
    {
        return ItemService!.GetWithQuery(
            q => q
                .Where(i => i.AppUserId == User!.Id)
                .Include(i => i.Product)
        );
    }

    private void Pay()
    {
        Console.WriteLine("--------------------------------PAYING------------------------------------------------------------------");
        Console.WriteLine($"PAYING: {Total}€");
        Console.WriteLine("--------------------------------PAYING------------------------------------------------------------------");
        var method = PaymentMethodService!.GetAll()!.FirstOrDefault();
        if (PurchaseSystem.Pay(method!, User!))
        {
            Navigation.NavigateTo("/PaymentSucssefully");
        }
    }
}
