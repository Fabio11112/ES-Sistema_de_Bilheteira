@page "/Cart"
@inherits AuthenticatedComponentBase
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using SistemaDeBilheteira.Components.Cards.Cart
@using SistemaDeBilheteira.Services.AuthenticationService.IService
@using SistemaDeBilheteira.Services.Database.Entities
@using SistemaDeBilheteira.Services.Database.Entities.ShoppingCart
@using SistemaDeBilheteira.Services.IService
@using SistemaDeBilheteira.Services.IService.ServiceManager
@inject IServiceManager ServiceManager

<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Montserrat|Poppins|Nunito">



<div class="background">
    <div class="logo">
        <img class="cart-image" src="images/icons/cart/cart.svg" alt="cart"/>
        <div class="title">MY CART</div>
    </div>
    
    <div class="flex">
        <div class="products">
            @foreach (var item in Items)
            {
                <div @key="item">
                    <CartItemElement
                        Item="@item"
                        Delete="(cartItem) => DeleteCartItem(cartItem)">
                    </CartItemElement>
                </div>
            }
        </div>
        
        <div class="payment">
            <PromoCode></PromoCode>
            <PaymentMethodElement></PaymentMethodElement> 
        </div>
    </div>
    
</div>


@code {
    private ICollection<ShoppingCartItem> Items { get; set; } = new List<ShoppingCartItem>();
    private IService<ShoppingCartItem>? ItemService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ItemService = ServiceManager.GetService<ShoppingCartItem>();
        Items = GetCartElements();
    }

    private void DeleteCartItem(ShoppingCartItem item)
    {
        Items.Remove(item);
        ItemService?.Delete(item);
    }

    private ICollection<ShoppingCartItem> GetCartElements()
    {
        return ItemService.GetWithQuery(
            q => 
                q
                    .Where(
                        i => i.AppUserId == User.Id)
                    .Include(i => i.Product)
        );
    }
    
}