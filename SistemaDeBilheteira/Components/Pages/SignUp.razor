@page "/SignUp"
@inherits AuthenticatedComponentBase
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using SistemaDeBilheteira.Components.Cards.Authentication
@using SistemaDeBilheteira.Services.AuthenticationService
@using SistemaDeBilheteira.Services.AuthenticationService.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<link rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Konkhmer+Sleokchher|Montserrrat">

<div class="background flex">
    <Banner></Banner>
    
    <div class="sign-up">
        <div class="greetings">Hello!</div>
        <div class="get-started">Sign Up to Get Started</div>


        <EditForm Model="User" OnValidSubmit="Register" FormName="user-register">
            <div class="flex input-element">
                <div class="logo"> <img class="user-logo" src="images/icons/profile/user.svg" alt=""/></div>
                <InputText @bind-Value="User!.Name" id="full name" placeholder="FULL NAME"/>
            </div>
            <div class="flex input-element">
                <div class="logo"> <img src="images/icons/authentication/email.svg" alt=""/></div>
                <InputText @bind-Value="User!.Email" id="email" type="email" placeholder="EMAIL ADDRESS"/>
            </div>
            <div class="flex input-element">
                <div class="logo"> <img src="images/icons/authentication/lock.svg" alt=""/></div>
                <InputText @bind-Value="User!.Password" id="password" type="password" placeholder="PASSWORD"/>
            </div>
            <div class="flex input-element">
                <div class="logo"> <img src="images/icons/authentication/lock.svg" alt=""/></div>
                <InputText @bind-Value="User!.ConfirmPassword" id="confirm-password" type="password" placeholder="CONFIRM PASSWORD"/>
            </div>
            
            <button type="submit" class="register">REGISTER</button>
            
            <div>@Message</div>

        </EditForm>
    </div>
    

</div>

@code {

    [SupplyParameterFromForm] private UserRegisterModel? User { get; set; } = new(); 
    private String Message { get; set; } = string.Empty;
    
    private async Task Register()
    {
        IResult result = await AuthService.RegisterAsync(User);

        if (!result.Success)
        {
            Console.WriteLine($"Name: {User.Name}\n Email: {User.Email}");
        }
        else
        {
            NavigationManager.NavigateTo("/Profile");
        }

        Message = result.Message;

    }

}