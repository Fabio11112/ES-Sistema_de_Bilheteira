@page "/MoviesDescription/{id:int}"
@inherits AuthenticatedComponentBase
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Response

@inject IJSRuntime JS

<PageTitle>Movie Description</PageTitle>

<main class="main-content">
    @if (Movie != null)
    {
        <section class="banner">
            <div class="banner-wrapper">
                <img src="@($"https://image.tmdb.org/t/p/w1280{Movie.BackdropPath}")" alt="@Movie.Title" class="banner-image" />
                <div class="banner-title-overlay">
                    <h2 class="banner-title">@Movie.Title</h2>
                </div> 
            </div>
            <a class="play-button-container" href="https://www.youtube.com/watch?v=@Trailers?.Results[0].Key" target="_blank" rel="noopener noreferrer">
                <img src="images/icons/MovieDescription/play.svg" alt="Play Trailer" class="play-icon" />
            </a>

        </section>

        <section class="movie-details">
            <div class="movie-details-wrapper">
                <p class="movie-release-date">
                    @(Movie.ReleaseDate.HasValue ? Movie.ReleaseDate.Value.ToString("yyyy-MM-dd") : "Unknown") • 
                    @Movie.certification • @FormatRuntime(Movie.Runtime)
                </p>

                <div class="genres-container">
                    @foreach (var genre in genreNames)
                    {
                        <span class="genre-badge">@genre</span>
                    }
                </div>

                <p class="movie-overview">@Movie.Overview</p>
                
                <div class="actions-container">
                    <div class="imdb-rating">
                        <p class="movie-rating">@Math.Round(Movie.VoteAverage, 1)</p>
                        <p class="imdb-label">IMDB</p>
                    </div>
                    
                    <div class="action-buttons">
                        <div class="watch-later-button">
                            <img src="images/icons/MovieDescription/add.svg" alt="Watch later" class="button-icon"/>
                            <p class="button-text">Watch Later</p>
                        </div>
                        <div class="share-button">
                            <img src="images/icons/MovieDescription/share.svg" alt="Share" class="button-icon"/>
                            <p class="button-text">Share</p>
                        </div>
                    </div>
                </div>

                <div class="cast-section">
                    <h3 class="section-title">CAST</h3>
                    
                    <div class="actors-grid">
                        @if (Actors?.Cast is { Count: > 0 })
                        {
                            @foreach (var actor in Actors.Cast.Take(6))
                            {
                                <div class="actor-card">
                                    <div class="actor-image">
                                        @if (!string.IsNullOrEmpty(actor.ProfilePath))
                                        {
                                            <img src="@($"https://image.tmdb.org/t/p/w185{actor.ProfilePath}")" alt="@actor.Name" class="actor"/>
                                            
                                        }
                                        else
                                        {
                                            <img src="images/placeholder-actor.png" alt="No image available" />
                                        }
                                    </div>
                                    <p class="actor-name">@actor.Name</p>
                                    <p class="actor-character">@actor.Character</p>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No cast available.</p>
                        }
                    </div>
                </div> 

                <div class="purchase-buttons">
                    <a href="@($"SelectSession/{Movie.Id}")">
                        <button class="primary-button">BUY TICKET</button>
                    </a>

                    <a href="@($"SelectType/{Movie.Id}")">
                        <button class="secondary-button">BUY/RENT</button>
                    </a>
                </div> 
            </div>
        </section>
    }
    else
    {
        <p class="loading">Loading movie details...</p>
    }


</main>
    
@code {
    [Parameter] public int id { get; set; }
    
    private Movie? Movie;
    private List<string> genreNames = new();
    private Response<Actor>? Actors;
    private Response<Video>? Trailers;  
    private bool showTrailerModal = false;

    /**
     * This method is called after the component has rendered.
     * It fetches the movie details and initializes the FunctionService.
     */
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", "window.scrollToTop = function () { window.scrollTo({ top: 0, behavior: 'smooth' }); };");
        }
    }
    
    /**
     * This method is called when the component is initialized.
     * It fetches the movie data from the API and sets the PosterPath and Type properties.
     */
    protected override async Task OnInitializedAsync()
    {
        
        var movieDeserializer = new Deserializer<Movie>();
        var genreDeserializer = new Deserializer<Response<Genre>>();
        var actorDeserializer = new Deserializer<Response<Actor>>();
        var videoDeserializer = new Deserializer<Response<Video>>();
        

        string? movieUrl = Environment.GetEnvironmentVariable("MOVIES_LINK");
        string? genresUrl = Environment.GetEnvironmentVariable("GENRES_LINK");
        
        Movie = await movieDeserializer.Fetch($"{movieUrl}/{id}")!;
        Actors = await actorDeserializer.Fetch($"{movieUrl}/{id}/credits")!;
        
        var allGenres = await genreDeserializer.Fetch(genresUrl);
        Trailers = await videoDeserializer.Fetch($"{movieUrl}/{id}/videos")!;  
        
    }
    
    /**
     * This method formats the runtime of the movie.
     */
    private string FormatRuntime(int runtime)
    {
        var hours = runtime / 60;
        var minutes = runtime % 60;
        return $"{hours}h {minutes}m";
    }
}
