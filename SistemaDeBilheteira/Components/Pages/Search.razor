@page "/search"
@using SistemaDeBilheteira.Services.API_Deserializer
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Models
@using SistemaDeBilheteira.Services.API_Deserializer.Deserializable.Response
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer
<PageTitle>Search Movies</PageTitle>

<main class="main-content">
    <section class="search-page">
        <input 
            type="text" 
            placeholder="Search Movies..." 
            class="search-input-box" 
            value="@searchTerm"
            @oninput="HandleInput" />

        @* <button class="search-btn" @onclick="PerformSearch">Search</button> *@

        @if (movies != null)
        {
            <div class="movie-results">
                @if (movies.Any())
                {
                    @foreach (var movie in movies)
                    {
                        <a href="@($"MoviesDescription/{movie.Id}")" class="poster-wrapper">
                            <img src="@($"https://image.tmdb.org/t/p/w500{movie.PosterPath}")" alt="@movie.Title" class="movie-poster"  />
                        </a>
                    }
                }
                else
                {
                    <p style="color:White">Results not Found</p>
                }
            </div>
        }else{
            <div class="welcome-message animated-fade-in">
                <h2><span class="highlight">All Your Favorite Movies</span><br />At One Click</h2>
            </div>

        }
    </section>
</main>

@code {
    private string searchTerm = "";
    private List<Movie>? movies;
    private System.Threading.Timer? searchTimer;
    private readonly int searchDelay = 100; 

    private async Task HandleInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await OnSearchTermChanged();
    }

    private async Task OnSearchTermChanged()
    {
        await Task.Delay(1); // Forcing async context to be captured
        searchTimer?.Dispose();
        
        if (string.IsNullOrWhiteSpace(searchTerm)) 
        {
            movies = new List<Movie>();
            StateHasChanged();
            return;
        }
        
        // Set up a timer to delay the search
        // This will prevent the search from being triggered too frequently
        searchTimer = new System.Threading.Timer(async _ => 
        {
            await InvokeAsync(PerformSearch);
        }, null, searchDelay, Timeout.Infinite);
    }

    private async Task PerformSearch()
    {
        var deserializer = new Deserializer<Response<Movie>>();
        var apiUrl = Environment.GetEnvironmentVariable("MOVIES_SEARCH_LINK");

        if (string.IsNullOrEmpty(apiUrl))
        {
            Console.WriteLine("API URL is empty");
            return;
        }

        try
        {
            var url = $"{apiUrl}?query={Uri.EscapeDataString(searchTerm)}";
            
            var response = await deserializer.Fetch(url);
            
            movies = response?.Results ?? new List<Movie>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en b√∫squeda: {ex.Message}");
            movies = new List<Movie>();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}